<html>
    <head>
        <title>Graph Monitoring</title>
        <link href="../../Themes/Centreon-2/style.css" rel="stylesheet" type="text/css"/>
        <link href="../../Themes/Centreon-2/jquery-ui/jquery-ui.css" rel="stylesheet" type="text/css"/>
        <link href="../../Themes/Centreon-2/jquery-ui/jquery-ui-centreon.css" rel="stylesheet" type="text/css"/>
        <link href="javascript/apexcharts.css" rel="stylesheet" type="text/css"/>
    </head>
    <body>
        {$servicePreferences}
        <!--<div id='graphMonitoringTable'></div>-->
        <div class="chart" data-graph-id="{$graphId}" data-graph-type="service"></div>
        <div class="chart-legend"></div>
        
        <div class="chart2" data-graph-id="{$graphId}" data-graph-type="service"></div>

        <script type="text/javascript" src="../../include/common/javascript/jquery/jquery.js"></script>
        <script type="text/javascript" src="../../include/common/javascript/jquery/jquery-ui.js"></script>
        <script type="text/javascript" src="../../include/common/javascript/jquery/plugins/treeTable/jquery.treeTable.min.js"></script>
        <script type="text/javascript" src="../../include/common/javascript/widgetUtils.js"></script>
        <script type="text/javascript" src="data.js"></script>
        <script type="text/javascript" src="../../include/common/javascript/moment-with-locales.js"></script>
        <script type="text/javascript" src="../../include/common/javascript/moment-timezone-with-data.min.js"></script>

        <script type="text/javascript" src="javascript/apexcharts.min.js"></script>


        <script type="text/javascript">
{literal}
function getTimes(settings, interval) {
  var start;
  var end;
  
  var timezone = localStorage.getItem('realTimezone')
      ? localStorage.getItem('realTimezone')
      : moment.tz.guess();

  if (settings.period.startTime === null ||
    settings.period.endTime === null) {

    start = moment().tz(timezone);
    end = moment().tz(timezone);

    start.subtract(interval.number, interval.unit);

  } else {
    myStart = settings.period.startTime;
    myEnd = settings.period.endTime;

    if (typeof(settings.period.startTime) === "number") {
      myStart = settings.period.startTime * 1000;
    }

    if (typeof(settings.period.endTime) === "number") {
      myEnd = settings.period.endTime * 1000;
    }

    start = moment.tz(myStart, timezone);
    end = moment.tz(myEnd, timezone);
  }

  return {
    start: start.unix(),
    end: end.unix()
  }
}
{/literal}
            
            var widgetId = {$widgetId};
            var autoRefresh = {$autoRefresh};
            var interval = '{$interval}s';
            {literal}
            var chart;
            var parameters = {
                interval: interval,
                refresh: autoRefresh,
                url: '../../api/internal.php?object=centreon_metric',
                buttonToggleCurves: false,
                extraLegend: false,
                period: { startTime: null, endTime: null }
            };
            
            var parseInterval = interval.match(/(\d+)([a-z]+)/i);
            var interval = {
                number: parseInterval[1],
                unit: parseInterval[2]
            };

            var period = getTimes(parameters, interval);

            var url = '../../api/internal.php?object=centreon_metric';
            url += '&action=metricsDataByService';
            url += '&ids=' + jQuery(".chart").data('graphId');
            url += '&start=' + period.start + '&end=' + period.end;
            $.ajax({
                url: url,
                type: 'GET',
                dataType: 'json',
                success: function (data) {
                    
                    

                    var options = {
                        chart: {
                            id: 'toto',
                            type: 'line',
                            //type: 'area', stacked: true,
                            height: '250px',
                            group: 'toto',
                            animations: {
                                enabled: false
                            },
                            events: {
                                beforeZoom: function(chartContext, { xaxis, yaxis }) {
                                    alert('before ZOOOOOOMMMMM');
                                }
                            },
                      },
                      theme: { mode: 'light' }, 
                      title: { text: 'le titre du graph',  align: 'center' },
                      stroke: {
                        width: 1
                      },
                      markers: {
                        size: 0
                      },
                      dataLabels: {
                            enabled: false
                       },
                      series: undefined,
                      /*yaxis: {
                        labels: {
                            formatter: function(val, index) {
                                return val.toFixed(2);
                            }
                        },
                        title: { text: 'mon boule y' }
                      },*/
                      colors: ['#112abf', '#ff0000'],
                      yaxis: [
                          {
                            seriesName: 'traffic',
                            opposite: false,
                            title: { text: 'traffic', style: { color: '#112abf' } },
                            axisBorder: {
                                show: true,
                                color: '#112abf'
                              },
                            labels: {
                                style: { color: '#112abf' },
                                formatter: function(val, index) {
                                    return val.toFixed(0);
                                }
                            }
                         },
                         {
                            seriesName: 'utils',
                            opposite: true,
                            title: { text: 'utils', style: { color: '#ff0000' } },
                            axisBorder: {
                                show: true,
                                color: '#ff0000'
                              },
                            labels: {
                                style: { color: '#ff0000' },
                                formatter: function(val, index) {
                                    return val.toFixed(2);
                                }
                            }
                         },
                         {
                            seriesName: 'utils',
                            show: false
                         }
                      ],
                      xaxis: {
                          type: 'datetime',
                          labels: {
                              show: true,
                              datetimeFormatter: {
                                    year: 'yyyy',
                                    month: "MMM 'yy",
                                    day: 'dd MMM',
                                    hour: 'HH:mm',
                                },
                            }
                      },
                      tooltip: {
                        enabled: true,
                        x: {
                          show: true
                        },
                        onDatasetHover: {
                            highlightDataSeries: false,
                        },
                        custom: function({series, seriesIndex, dataPointIndex, w}) {
                              return '<div class="arrow_box">' +
                                '<span>' + series[seriesIndex][dataPointIndex] + '</span>' +
                                '</div>'
                        }
                      },
                      markers: {
                        size: 0,
                        hover: {
                            size: 0,
                            sizeOffset: 0
                        }
                      },
                      legend: {
                        show: false,
                       },
                       noData: {
                        text: 'No data',
                        align: 'center',
                        verticalAlign: 'middle',
                        offsetX: 0,
                        offsetY: 0,
                        style: {
                            fontSize: '14px',
                            fontFamily: undefined
                          }
                       },
                       annotations: {
                           position: 'front',
                           xaxis: [
                            {
                            // in a datetime series, the x value should be a timestamp, just like it is generated below
                            x: (1570805358 - 30000) * 1000,
                            strokeDashArray: 0,
                            borderColor: "#a4aff0",
                            label: {
                              borderColor: "#a4aff0",
                              style: {
                                color: "#fff",
                                background: "#a4aff0"
                              },
                              text: "ack by robert od dsoksqdoqsdk qsdk "
                              }
                            }/*,
                            {
                              x: (1570805358 - 50000) * 1000,
                              x2: (1570805358 - 40000) * 1000,
                              fillColor: '#ee98d9',
                              opacity: 0.4,
                              label: {
                                borderColor: '#ee98d9',
                                style: {
                                  fontSize: '10px',
                                  color: '#fff',
                                  background: '#ee98d9',
                                },
                                offsetY: -10,
                                text: ' ',
                              }
                            }*/
                           ]
                       }
                    };

                    /*color = { 0: '#b2f3b2', 1: '#f5f4a6', 2: '#ee9999', 3: '#cecece' };
                    for (var start = period.start; start < period.end;) {
                         var status = Math.floor(Math.random() * 4);
                         
                         rand_end = Math.floor(Math.random() * 10000);
                         options['annotations']['xaxis'].push({
                            x: start * 1000,
                            x2: (start + rand_end + 10000) * 1000,
                            fillColor: color[status],
                            opacity: 0.3,
                            label: {
                                text: ' '
                            }
                        });
                        start += rand_end + 10000;
                    }*/
                    
                    var legend = '';
                    var series = [];
                    for (var i = 0; i < data[0]['data'].length; i++) {
                        var serie = { name: data[0]['data'][i]['label'], data: [] };
                        for (var j = 0; j < data[0]['data'][i]['data'].length; j++) {
                            serie['data'].push([data[0]['times'][j] * 1000, data[0]['data'][i]['data'][j]]);
                        }

                        legend += '<div id="legend-' + data[0]['data'][i]['label'] + '" onclick="chart.toggleSeries(this.textContent)">' + data[0]['data'][i]['label'] + '</div>';
                        series.push(serie);
                    }

                    options['series'] = series;
                    console.log(data);

                     chart = new ApexCharts(document.querySelector(".chart"), options);
                     chart.render();
                     jQuery('.chart-legend').html(legend);
                     
                     var options2 = options;
                     options2.id = 'toto2';
                     chart2 = new ApexCharts(document.querySelector(".chart2"), options2);
                     chart2.render();
                }
            });

            parent.iResize(window.name, 700);
            {/literal}
        </script>
    </body>
